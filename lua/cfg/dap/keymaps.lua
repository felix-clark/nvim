local function nmap(lhs, rhs, desc)
  local opts = { silent = true, desc = desc }
  vim.keymap.set("n", lhs, rhs, opts)
end

local M = {}
function M.setup()
  nmap("<leader>dR", function()
    require("dap").run_to_cursor()
  end, "Run to Cursor")
  nmap("<leader>dE", function()
    require("dapui").eval(vim.fn.input "[Expression] > ")
  end, "Evaluate Input")
  nmap("<leader>dC", function()
    require("dap").set_breakpoint(vim.fn.input "[Condition] > ")
  end, "Conditional Breakpoint")
  nmap("<leader>dU", function()
    require("dapui").toggle()
  end, "Toggle UI")
  nmap("<leader>db", function()
    require("dap").step_back()
  end, "Step Back")
  nmap("<leader>dc", function()
    require("dap").continue()
  end, "Continue")
  nmap("<leader>dd", function()
    require("dap").disconnect()
  end, "Disconnect")
  nmap("<leader>de", function()
    require("dapui").eval()
  end, "Evaluate")
  nmap("<leader>dg", function()
    require("dap").session()
  end, "Get Session")
  -- see :h dap-widgets for more to do with these, although much is covered by
  -- dap-ui.
  nmap("<leader>dh", function()
    require("dap.ui.widgets").hover()
  end, "Hover Variables")
  nmap("<leader>di", function()
    require("dap").step_into()
  end, "Step Into")
  nmap("<leader>do", function()
    require("dap").step_over()
  end, "Step Over")
  nmap("<leader>dp", function()
    require("dap").pause()
  end, "Pause")
  nmap("<leader>dq", function()
    require("dap").close()
  end, "Quit")
  nmap("<leader>dr", function()
    require("dap").repl.toggle()
  end, "Toggle Repl")
  nmap("<leader>ds", function()
    require("dap").continue()
  end, "Start")
  nmap("<leader>dt", function()
    require("dap").toggle_breakpoint()
  end, "Toggle Breakpoint")
  nmap("<leader>dx", function()
    require("dap").terminate()
  end, "Terminate")
  nmap("<leader>du", function()
    require("dap").step_out()
  end, "Step Out")

  -- evalutes the highlighted expression
  vim.keymap.set("v", "<leader>e", function()
    require("dapui").eval()
  end, { silent = true, desc = "Evaluate" })
end

return M
